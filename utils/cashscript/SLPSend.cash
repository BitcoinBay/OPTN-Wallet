pragma cashscript ^0.3.3;

contract SLPSend(bytes20 ownerHash) {
  function reclaim(pubkey pk, sig s) {
    require(hash160(pk) == ownerHash);
    require(checkSig(s, pk));
  }

  function SLPSend(pubkey pk, sig s, bytes20 SLPReceiver, bytes32 tokenId, bytes8 sendSLPAmount, bytes8 changeSLPAmount) {
    require(hash160(pk) == ownerHash);
    require(checkSig(s, pk));

    bytes send = new OutputNullData([
      0x534c5000,
      0x01,
      bytes('SEND'),
      tokenId,
      sendSLPAmount,
      changeSLPAmount
    ]);

    int dust = 546;
    int minerFee = 1000;
    int changeAmount = int(bytes(tx.value)) - dust - minerFee;

    bytes34 receiver = new OutputP2PKH(bytes8(dust), SLPReceiver);

    if (changeAmount >= minerFee) {
      bytes32 change = new OutputP2SH(bytes8(changeAmount), hash160(tx.bytecode));
      require(tx.hashOutputs == hash256(send + receiver + change));
    } else {
      require(tx.hashOutputs == hash256(send + receiver));
    }
  }
}