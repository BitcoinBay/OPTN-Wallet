{
  "contractName": "SLPGenesis",
  "constructorInputs": [
    {
      "name": "ownerHash",
      "type": "bytes20"
    }
  ],
  "abi": [
    {
      "name": "reclaim",
      "covenant": false,
      "inputs": [
        {
          "name": "pk",
          "type": "pubkey"
        },
        {
          "name": "s",
          "type": "sig"
        }
      ]
    },
    {
      "name": "SLPGenesis",
      "covenant": true,
      "inputs": [
        {
          "name": "pk",
          "type": "pubkey"
        },
        {
          "name": "s",
          "type": "sig"
        },
        {
          "name": "ticker",
          "type": "bytes"
        },
        {
          "name": "name",
          "type": "bytes"
        },
        {
          "name": "url",
          "type": "bytes"
        },
        {
          "name": "hash",
          "type": "bytes32"
        },
        {
          "name": "decimal",
          "type": "bytes1"
        },
        {
          "name": "mintVout",
          "type": "bytes1"
        },
        {
          "name": "initialSupply",
          "type": "bytes8"
        }
      ]
    }
  ],
  "bytecode": "OP_OVER OP_0 OP_NUMEQUAL OP_IF OP_2 OP_PICK OP_HASH160 OP_EQUALVERIFY OP_ROT OP_ROT OP_CHECKSIG OP_NIP OP_ELSE OP_SWAP OP_1 OP_NUMEQUAL OP_IF OP_OVER 6b OP_SPLIT OP_NIP OP_SIZE 34 OP_SUB OP_SPLIT OP_8 OP_SPLIT OP_4 OP_SPLIT OP_NIP 20 OP_SPLIT OP_DROP OP_5 OP_PICK OP_HASH160 OP_4 OP_ROLL OP_EQUALVERIFY OP_2ROT OP_2DUP OP_SWAP OP_SIZE OP_1SUB OP_SPLIT OP_DROP OP_7 OP_ROLL OP_SHA256 OP_ROT OP_CHECKDATASIGVERIFY OP_CHECKSIGVERIFY 0000000000000000 6a 534c5000 OP_SIZE OP_DUP 4b OP_GREATERTHAN OP_IF 4c OP_SWAP OP_CAT OP_ENDIF OP_SWAP OP_CAT OP_CAT OP_1 OP_SIZE OP_DUP 4b OP_GREATERTHAN OP_IF 4c OP_SWAP OP_CAT OP_ENDIF OP_SWAP OP_CAT OP_CAT 47454e45534953 OP_SIZE OP_DUP 4b OP_GREATERTHAN OP_IF 4c OP_SWAP OP_CAT OP_ENDIF OP_SWAP OP_CAT OP_CAT OP_5 OP_ROLL OP_SIZE OP_DUP 4b OP_GREATERTHAN OP_IF 4c OP_SWAP OP_CAT OP_ENDIF OP_SWAP OP_CAT OP_CAT OP_5 OP_ROLL OP_SIZE OP_DUP 4b OP_GREATERTHAN OP_IF 4c OP_SWAP OP_CAT OP_ENDIF OP_SWAP OP_CAT OP_CAT OP_5 OP_ROLL OP_SIZE OP_DUP 4b OP_GREATERTHAN OP_IF 4c OP_SWAP OP_CAT OP_ENDIF OP_SWAP OP_CAT OP_CAT OP_5 OP_ROLL OP_SIZE OP_DUP 4b OP_GREATERTHAN OP_IF 4c OP_SWAP OP_CAT OP_ENDIF OP_SWAP OP_CAT OP_CAT OP_5 OP_ROLL OP_SIZE OP_DUP 4b OP_GREATERTHAN OP_IF 4c OP_SWAP OP_CAT OP_ENDIF OP_SWAP OP_CAT OP_CAT OP_5 OP_ROLL OP_SIZE OP_DUP 4b OP_GREATERTHAN OP_IF 4c OP_SWAP OP_CAT OP_ENDIF OP_SWAP OP_CAT OP_CAT OP_5 OP_ROLL OP_SIZE OP_DUP 4b OP_GREATERTHAN OP_IF 4c OP_SWAP OP_CAT OP_ENDIF OP_SWAP OP_CAT OP_CAT OP_SIZE OP_SWAP OP_CAT OP_CAT 2202 e803 OP_4 OP_ROLL OP_BIN2NUM OP_2 OP_PICK OP_SUB OP_OVER OP_SUB OP_ROT OP_8 OP_NUM2BIN 17a914 OP_CAT OP_5 OP_PICK OP_HASH160 OP_CAT 87 OP_CAT OP_OVER OP_3 OP_ROLL OP_GREATERTHANOREQUAL OP_IF OP_OVER OP_8 OP_NUM2BIN 17a914 OP_CAT OP_5 OP_PICK OP_HASH160 OP_CAT 87 OP_CAT OP_4 OP_PICK OP_4 OP_PICK OP_3 OP_PICK OP_CAT OP_2 OP_PICK OP_CAT OP_HASH256 OP_EQUALVERIFY OP_DROP OP_ELSE OP_2OVER OP_2 OP_PICK OP_CAT OP_HASH256 OP_EQUALVERIFY OP_ENDIF OP_2DROP OP_2DROP OP_DROP OP_1 OP_ELSE OP_0 OP_ENDIF OP_ENDIF",
  "source": "pragma cashscript ^0.3.3;\n\ncontract SLPGenesis(bytes20 ownerHash) {\n  function reclaim(pubkey pk, sig s) {\n    require(hash160(pk) == ownerHash);\n    require(checkSig(s, pk));\n  }\n\n  function SLPGenesis(pubkey pk, sig s, bytes ticker, bytes name, bytes url, bytes32 hash, bytes1 decimal, bytes1 mintVout, bytes8 initialSupply) {\n    require(hash160(pk) == ownerHash);\n    require(checkSig(s, pk));\n\n    bytes genesis = new OutputNullData([\n      0x534c5000,\n      0x01,\n      bytes('GENESIS'),\n      ticker,\n      name,\n      url,\n      hash,\n      decimal,\n      mintVout,\n      initialSupply\n    ]);\n\n    int dust = 546;\n    int minerFee = 1000;\n    int changeAmount = int(bytes(tx.value)) - dust - minerFee;\n\n    bytes32 initialReceiver = new OutputP2SH(bytes8(dust), hash160(tx.bytecode));\n\n    if (changeAmount >= minerFee) {\n      bytes32 change = new OutputP2SH(bytes8(changeAmount), hash160(tx.bytecode));\n      require(tx.hashOutputs == hash256(genesis + initialReceiver + change));\n    } else {\n      require(tx.hashOutputs == hash256(genesis + initialReceiver));\n    }\n  }\n}\n",
  "networks": {},
  "compiler": {
    "name": "cashc",
    "version": "0.3.3"
  },
  "updatedAt": "2020-04-07T21:52:26.074Z"
}
