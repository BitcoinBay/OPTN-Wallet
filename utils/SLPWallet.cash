pragma cashscript ^0.3.3;

contract SLPWallet(bytes20 ownerHash) {
  function reclaim(pubkey pk, sig s) {
    require(hash160(pk) == ownerHash);
    require(checkSig(s, pk));
  }

  function SLPGenesis(bytes ticker, bytes name, bytes url, bytes32 hash, bytes1 decimal, bytes1 mintVout, bytes8 initialSupply) {
    bytes genesis = new OutputNullData([
      0x534c5000,
      0x01,
      bytes('GENESIS'),
      ticker,
      name,
      url,
      hash,
      decimal,
      mintVout,
      initialSupply
    ]);

    int dust = 546;
    int minerFee = 1000;
    int changeAmount = int(bytes(tx.value)) - dust - minerFee;

    bytes32 initialReceiver = new OutputP2SH(bytes8(dust), hash160(tx.bytecode));

    if (changeAmount >= minerFee) {
      bytes32 change = new OutputP2SH(bytes8(changeAmount), hash160(tx.bytecode));
      require(tx.hashOutputs == hash265(genesis + initialReceiver + change));
    } else {
      require(tx.hashOutputs == hash256(genesis + initialReceiver));
    }
  }

  function SLPMint(pubkey pk, bytes32 tokenId, bytes1 mintVout, bytes8 additionalSupply) {
    bytes mint = new OutputNullData([
      0x534c5000,
      0x01,
      bytes('MINT'),
      tokenId,
      mintVout,
      additionalSupply
    ]);

    int dust = 546;
    int minerFee = 1000;
    int changeAmount = int(bytes(tx.value)) - dust - minerFee;

    bytes32 mintReceiver = new OutputP2PKH(bytes8(dust), pk);
    bytes32 mintBaton = new OutputP2SH(bytes8(dust), hash160(tx.bytecode));

    if (changeAmount >= minerFee) {
      bytes32 change = new OutputP2SH(bytes8(changeAmount), hash160(tx.bytecode));
      require(tx.hashOutputs == hash256(mint + mintReceiver + mintBaton + change));
    } else {
      require(tx.hashOutputs == hash256(mint + mintReceiver + mintBaton));
    }
  }

  function SLPSend(pubkey pk, bytes32 tokenId, bytes8 sendSLPAmount, bytes8 changeSLPAmount) {
    bytes send = new OutputNullData([
      0x534c5000,
      0x01,
      bytes('SEND'),
      tokenId,
      sendSLPAmount,
      changeSLPAmount
    ]);

    int dust = 546;
    int minerFee = 1000;
    int changeAmount = int(bytes(tx.value)) - dust - minerFee;

    bytes receiver = new OutputP2PKH(bytes8(dust), pk);

    if (changeAmount >= minerFee) {
      bytes32 change = new OutputP2SH(bytes8(changeAmount), hash160(tx.bytecode));
      require(tx.hashOutputs == hash256(send + receiver + change));
    } else {
      require(tx.hashOutputs == hash256(send + receiver));
    }
  }
}
